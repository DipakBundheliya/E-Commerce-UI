import { createAsyncThunk, createSlice } from "@reduxjs/toolkit";
import {
  addToWishlist,
  deleteItemFromWishlist,
  fetchWishItemsByUserId,
} from "./wishlistAPI";

const initialState = {
  items: [],
  status: "idle",
};

export const addToWishlistAsync = createAsyncThunk(
  "wishlist/addToCart",
  async (item) => {
    const response = await addToWishlist(item);
    // The value we return becomes the `fulfilled` action payload
    return response.data;
  }
);
export const fetchWishItemsByUserIdAsync = createAsyncThunk(
  "wishlist/fetchItemsByUserId",
  async (id) => {
    const response = await fetchWishItemsByUserId(id);
    // The value we return becomes the `fulfilled` action payload
    return response.data;
  }
);
export const deleteItemFromWishlistAsync = createAsyncThunk(
  "wishlist/deleteItemFromCart",
  async (id) => {
    const response = await deleteItemFromWishlist(id);
    // The value we return becomes the `fulfilled` action payload
    return response.data;
  }
);

export const wishlistSlice = createSlice({
  name: "wishlist",
  initialState,
  reducers: {
    increment: (state) => {
      // state.value += 1;
    },
  },
  // The `extraReducers` field lets the slice handle actions defined elsewhere,
  // including actions generated by createAsyncThunk or in other slices.
  extraReducers: (builder) => {
    builder
      .addCase(addToWishlistAsync.pending, (state) => {
        state.status = "loading";
      })
      .addCase(addToWishlistAsync.fulfilled, (state, action) => {
        state.status = "idle";
        state.items.push(action.payload);
      })
      .addCase(fetchWishItemsByUserIdAsync.pending, (state) => {
        state.status = "loading";
      })
      .addCase(fetchWishItemsByUserIdAsync.fulfilled, (state, action) => {
        state.status = "idle";
        state.items = action.payload;
      })
      .addCase(deleteItemFromWishlistAsync.pending, (state) => {
        state.status = "loading";
      })
      .addCase(deleteItemFromWishlistAsync.fulfilled, (state, action) => {
        state.status = "idle";
        state.items = state.items.filter(
          (item) => item.id !== action.payload.id
        );
      });
  },
});

// export const { increment } = cartSlice.actions;

export const selectWishlistItems = (state) => state.wishlist.items;

export default wishlistSlice.reducer;
